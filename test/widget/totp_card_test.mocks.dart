// Mocks generated by Mockito 5.4.6 from annotations
// in totp/test/widget/totp_card_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:totp/src/blocs/totp_bloc/totp_bloc.dart' as _i7;
import 'package:totp/src/blocs/totp_bloc/totp_event.dart' as _i8;
import 'package:totp/src/blocs/totp_bloc/totp_state.dart' as _i3;
import 'package:totp/src/core/services/settings_service.dart' as _i4;
import 'package:totp/src/features/totp_generation/totp_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTotpCodeInfo_0 extends _i1.SmartFake implements _i2.TotpCodeInfo {
  _FakeTotpCodeInfo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTotpState_1 extends _i1.SmartFake implements _i3.TotpState {
  _FakeTotpState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i4.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  bool getCopyTotpOnTap() =>
      (super.noSuchMethod(
            Invocation.method(#getCopyTotpOnTap, []),
            returnValue: false,
          )
          as bool);

  @override
  _i5.Future<void> setCopyTotpOnTap(bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setCopyTotpOnTap, [value]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  int getTotpRefreshInterval() =>
      (super.noSuchMethod(
            Invocation.method(#getTotpRefreshInterval, []),
            returnValue: 0,
          )
          as int);

  @override
  _i5.Future<void> setTotpRefreshInterval(int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setTotpRefreshInterval, [value]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> getBiometricAuthEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getBiometricAuthEnabled, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> setBiometricAuthEnabled(bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBiometricAuthEnabled, [value]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [TotpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTotpService extends _i1.Mock implements _i2.TotpService {
  MockTotpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> generateTotpAsync(String? secret, {int? interval = 30}) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateTotpAsync,
              [secret],
              {#interval: interval},
            ),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(
                  #generateTotpAsync,
                  [secret],
                  {#interval: interval},
                ),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  String generateTotp(String? secret, {int? interval = 30}) =>
      (super.noSuchMethod(
            Invocation.method(#generateTotp, [secret], {#interval: interval}),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#generateTotp, [secret], {#interval: interval}),
            ),
          )
          as String);

  @override
  int getRemainingSeconds({int? interval = 30}) =>
      (super.noSuchMethod(
            Invocation.method(#getRemainingSeconds, [], {#interval: interval}),
            returnValue: 0,
          )
          as int);

  @override
  _i2.TotpCodeInfo getTotpWithTimeInfo(String? secret, {int? interval = 30}) =>
      (super.noSuchMethod(
            Invocation.method(
              #getTotpWithTimeInfo,
              [secret],
              {#interval: interval},
            ),
            returnValue: _FakeTotpCodeInfo_0(
              this,
              Invocation.method(
                #getTotpWithTimeInfo,
                [secret],
                {#interval: interval},
              ),
            ),
          )
          as _i2.TotpCodeInfo);

  @override
  void preloadTotpCodes(List<String>? secrets, {int? interval = 30}) =>
      super.noSuchMethod(
        Invocation.method(#preloadTotpCodes, [secrets], {#interval: interval}),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> preloadTotpCodesAsync(
    List<String>? secrets, {
    int? interval = 30,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #preloadTotpCodesAsync,
              [secrets],
              {#interval: interval},
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> getCacheStats() =>
      (super.noSuchMethod(
            Invocation.method(#getCacheStats, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TotpBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTotpBloc extends _i1.Mock implements _i7.TotpBloc {
  MockTotpBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TotpState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTotpState_1(this, Invocation.getter(#state)),
          )
          as _i3.TotpState);

  @override
  _i5.Stream<_i3.TotpState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i3.TotpState>.empty(),
          )
          as _i5.Stream<_i3.TotpState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i8.TotpEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i8.TotpEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.TotpState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i8.TotpEvent>(
    _i9.EventHandler<E, _i3.TotpState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(_i9.Transition<_i8.TotpEvent, _i3.TotpState>? transition) =>
      super.noSuchMethod(
        Invocation.method(#onTransition, [transition]),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i9.Change<_i3.TotpState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
